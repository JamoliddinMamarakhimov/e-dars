basePath: /
definitions:
  controllers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controllers.accessTokenResponse:
    properties:
      access_token:
        type: string
    type: object
  controllers.defaultResponse:
    properties:
      message:
        type: string
    type: object
  models.Class:
    properties:
      classroom_number:
        type: integer
      desc:
        type: string
      id:
        type: integer
      name:
        type: string
      teacher:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Group:
    properties:
      code_name:
        type: string
      id:
        type: integer
    type: object
  models.Role:
    properties:
      code:
        type: string
      name:
        type: string
    type: object
  models.SignInInput:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.SwagClass:
    properties:
      classroom_number:
        type: integer
      desc:
        type: string
      name:
        type: string
      teacher_id:
        items:
          type: integer
        type: array
    type: object
  models.SwagUser:
    properties:
      full_name:
        type: string
      password:
        type: string
      role_code:
        type: string
      username:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deactivated_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      group:
        $ref: '#/definitions/models.Group'
      group_id:
        type: integer
      id:
        type: integer
      is_active:
        type: boolean
      is_deleted:
        type: boolean
      password:
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/models.Role'
      role_code:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API Server for E-dars Application
  title: E-dars API
  version: "1.0"
paths:
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: sign in to account
      operationId: sign-in-to-account
      parameters:
      - description: sign-in info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SignInInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.accessTokenResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: SignIn
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: create account
      operationId: create-account
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SwagUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.defaultResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: SignUp
      tags:
      - auth
  /classes:
    get:
      description: get list of all classes
      operationId: get-all-classes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Class'
            type: array
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get All Classes
      tags:
      - classes
    post:
      consumes:
      - application/json
      description: create new class
      operationId: create-class
      parameters:
      - description: New Class info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SwagClass'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.defaultResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create Class
      tags:
      - classes
  /ping:
    get:
      consumes:
      - application/json
      description: Show logo if check is OK
      operationId: ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.defaultResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Check Connection
      tags:
      - check
  /users:
    get:
      description: get list of all users
      operationId: get-all-users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get All Users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: create new user
      operationId: create-user
      parameters:
      - description: New User info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SwagUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.defaultResponse'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create User
      tags:
      - users
  /users/{id}:
    get:
      description: get user by ID
      operationId: get-user-by-id
      parameters:
      - description: id of the user
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get User By ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user by ID
      operationId: update-user
      parameters:
      - description: id of the user
        in: path
        name: id
        required: true
        type: integer
      - description: User info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SwagUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: "404"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user by ID
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
